{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO09gA44DqcOyNpBtWpzSbf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Uv6kPsV_XqzS"},"outputs":[],"source":["## 問題0　文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ\n","\n","text1=\"stressed\"\n","temp=\"\"\n","for i in reversed(text1):\n","  temp+= i\n","print(temp)\n","\n","##問題1　「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ．\n","text2= \"パタトクカシーー\"\n","temp=\"\"\n","for i in text2[0:8:2]:\n","  temp+=i\n","print(temp)\n","\n","## 問題2　「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ\n","text3=\"パトカー\"\n","text31=\"タクシー\"\n","temp=\"\"\n","\n","for i3, i31 in zip(text3, text31): #zip関数は複数のリストを同時に取得できる。\n","  temp+= i3+i31\n","print(temp)\n","\n","##問題3　“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ\n","\n","text4= \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\n","text4=text4.replace(\",\",\"\").replace(\".\",\"\")\n","#len関数はオブジェクトのサイズを取得（文字列の長さ、リストの要素数等）\n","#splitは()を空白にすると空白やタブ、改行等で区切られる。\n","[len(i) for i in text4.split()]\n","\n","##問題4　“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字，それ以外の単語は先頭の2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．\n","\n","t5=\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n","t5=t5.replace(\".\",\"\")\n","num=[1, 5, 6, 7, 8, 9, 15, 16, 19]\n","dic={}\n","\n","for i,x in enumerate(t5.split()):\n","  if (i+1) in dic:\n","    v=x[:1]\n","  else:\n","    v=x[:2]\n","  dic[v]=i+1\n","print(dic)\n","\n","##5 与えられたシーケンス（文字列やリストなど）からn-gramを作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語bi-gram，文字bi-gramを得よ．\n","\n","#n-gramは連続するｎ個の単語や文字のまとまり.（今日はいい天気ですね　の文字bi-gram　今日　単語bi-gram 今日は）\n","\n","#defで関数定義 引数を使って何かをする\n","\n","\n","def N_gram(n,text):\n","    ngramed=[text[i:i+n] for i in range(len(text))if i+n <= len(text) ]\n","    #i:i+2, i=0の時、Iaまでが範囲　range(0,2)は2-1で止まる\n","    return ngramed\n","\n","alp=\"I am an NLPer\".replace(\" \",\"\")\n","word=\"I am an NLPer\".split(\" \")\n","\n","n=2\n","\n","print(N_gram(n,alp))\n","print(N_gram(n,word))\n","\n","\n","##問題6　“paraparaparadise”と”paragraph”に含まれる文字bi-gramの集合を，それぞれ, XとYとして求め，XとYの和集合，積集合，差集合を求めよ．さらに，’se’というbi-gramがXおよびYに含まれるかどうかを調べよ\n","\n","t61=\"paraparaparadise\"\n","t62=\"paragraph\"\n","\n","X=set(N_gram(2,t61))\n","Y=set(N_gram(2,t62))\n","\n","XplusY=X.union(Y)\n","print(XplusY) #和集合\n","\n","XandY=X.intersection(Y)\n","print(XandY)\n","\n","XminusY=X.difference(Y)\n","print(XminusY)\n","\n","print(\"se\" in X)\n","\n","##7 引数x, y, zを受け取り「x時のyはz」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4として，実行結果を確認せよ．\n","\n","def f7(x,y,z):\n","  return str(x)+\"時の\"+y+\"は\"+str(z)\n","\n","print(f7(12,\"気温\",22.4))\n","\n","##8 与えられた文字列の各文字を，以下の仕様で変換する関数cipherを実装せよ．\n","#英小文字ならば(219 - 文字コード)の文字に置換\n","#その他の文字はそのまま出力\n","#この関数を用い，英語のメッセージを暗号化・復号化せよ．\n","\n","def cipher(t8):\n","  newt8=\"\"\n","  for i in t8:\n","    if i.islower() and i.isalpha():\n","      i=chr(219-ord(i)) #.islower 小文字 isalpha　アルファベット\n","    newt8+=i\n","  return newt8\n","\n","print(cipher(\"I am an NLPer\"))\n","\n","#9 スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ．\n","\n","\n","import random\n","\n","t9=\"I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n","text = t9.split()\n","result = []\n","for word in text:\n","   if len(word) > 4:\n","       mid = list(word[1:-1]) #1:-1で端以外を取ってこれる\n","       random.shuffle(mid)\n","       result.append(word[0] + ''.join(mid) + word[-1])\n","   else:\n","       result.append(word)\n","print(' '.join(result))\n","\n","\n","\n","\n","\n","\n"]}]}